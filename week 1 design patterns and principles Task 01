public class SingletonPatternExample {

    // Logger Class
    public static class Logger {
        // Private static instance of Logger
        private static Logger instance;

        // Private constructor to prevent instantiation
        private Logger() {
            // Initialization code, if any
        }

        // Public static method to get the instance of Logger
        public static Logger getInstance() {
            // Create instance if not already created
            if (instance == null) {
                synchronized (Logger.class) {
                    if (instance == null) {
                        instance = new Logger();
                    }
                }
            }
            return instance;
        }

        // Method to log messages
        public void log(String message) {
            System.out.println("Log: " + message);
        }
    }

    // SingletonTest Class
    public static class SingletonTest {
        public static void main(String[] args) {
            // Attempt to get the instance of Logger
            Logger logger1 = Logger.getInstance();
            Logger logger2 = Logger.getInstance();

            // Log messages to demonstrate functionality
            logger1.log("This is the first log message.");
            logger2.log("This is the second log message.");

            // Verify that both references point to the same instance
            if (logger1 == logger2) {
                System.out.println("Both logger1 and logger2 are the same instance.");
            } else {
                System.out.println("logger1 and logger2 are different instances.");
            }
        }
    }
}
